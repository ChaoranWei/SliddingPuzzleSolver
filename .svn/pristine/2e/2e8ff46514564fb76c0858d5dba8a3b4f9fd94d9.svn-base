package edu.wm.cs.cs301.slidingpuzzle;

import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;
import java.util.Stack;

import edu.wm.cs.cs301.slidingpuzzle.PuzzleState.Operation;

public class DFSSolver implements PuzzleSolver {
	
	private int[] initialState;
	private int[] finalState;
	private int counter;
	private PuzzleState curState;

	@Override
	public boolean configure(int[] initial, int[] goal) {
		initialState = initial;
		finalState = goal;
		counter = 0;
		return initial.length == goal.length; //remember to check all are integers
	}

	
	private boolean CheckMember(Set<int[]> set, int[] state) {
		for (int[] item: set) {
			if (Arrays.equals(state, item)) {
				return true;
			}
		}
		return false;
	}
	
	@Override
	public Operation[] movesToSolve() {
		// TODO Auto-generated method stub
		Queue<Operation> OpList = new LinkedList<Operation>();
		Stack<PuzzleState> s = new Stack<PuzzleState>();
		Set<int[]> garbage = new HashSet<int[]>();
		curState = this.getSolverInitialState();
		s.add(curState);
		
		while (!s.isEmpty()){
			curState = s.peek();
			if (!Arrays.equals(curState.getState(), this.getSolverFinalState().getState())) {
				garbage.add(curState.getState());
				int count = 0;
				if (curState.moveUp() != null) {
				    if (!CheckMember(garbage, curState.moveUp().getState())) {
					    s.push(curState.moveUp());
					    count++;
				    }
				}
				if (curState.moveDown() != null) {
				    if (!CheckMember(garbage, curState.moveDown().getState())) {
				    	s.push(curState.moveDown());
				    	count++;
				    	
				    } 
				}
				if (curState.moveRight() != null) {
				    if (!CheckMember(garbage, curState.moveRight().getState())) {
				    	s.push(curState.moveRight());
				    	count++;
				    } 
				}
				if (curState.moveLeft() != null) {
					if (!CheckMember(garbage, curState.moveLeft().getState())) {
						s.push(curState.moveLeft());
						count++;
					} 
			    if (count == 0) {
			    	s.pop();
			    }
					
				} else {
					while (curState.getParent() != null) {
						OpList.add(curState.getOperation());
						curState = curState.getParent();
					}
					Operation[] OpArray = new Operation[OpList.size()];
					int count1 = OpList.size();
					for (Operation Op: OpList){
						count1--;
						OpArray[count1] = Op;
						
					}
					//System.out.println(OpArray.length);
					return OpArray;
				}
			}
		}
		return null;
	}

	@Override
	public PuzzleState getSolverInitialState() {
		// TODO Auto-generated method stub
		PuzzleState InitialState = new SimplePuzzleState();
		InitialState.setState(initialState);
		return InitialState;
	}

	@Override
	public PuzzleState getSolverFinalState() {
		// TODO Auto-generated method stub
		PuzzleState FinalState = new SimplePuzzleState();
		FinalState.setState(finalState);
		return FinalState;
	}

	@Override
	public int getNumberOfStatesExplored() {
		// TODO Auto-generated method stub
		return counter;
	}

	@Override
	public int getMaxSizeOfQueue() {
		// TODO Auto-generated method stub
		return 1000000000;  
	}

}
