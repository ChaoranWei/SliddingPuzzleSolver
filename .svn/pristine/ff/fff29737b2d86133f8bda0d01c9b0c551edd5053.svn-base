<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (1.8.0_60) on Thu Sep 03 10:07:08 EDT 2015 -->
<title>PuzzleSolverTest</title>
<meta name="date" content="2015-09-03">
<link rel="stylesheet" type="text/css" href="../../../../../stylesheet.css" title="Style">
<script type="text/javascript" src="../../../../../script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="PuzzleSolverTest";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/PuzzleSolverTest.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev&nbsp;Class</li>
<li>Next&nbsp;Class</li>
</ul>
<ul class="navList">
<li><a href="../../../../../index.html?edu/wm/cs/cs301/slidingpuzzle/PuzzleSolverTest.html" target="_top">Frames</a></li>
<li><a href="PuzzleSolverTest.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../../../../../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">edu.wm.cs.cs301.slidingpuzzle</div>
<h2 title="Class PuzzleSolverTest" class="title">Class PuzzleSolverTest</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>edu.wm.cs.cs301.slidingpuzzle.PuzzleSolverTest</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<hr>
<br>
<pre>public class <span class="typeNameLabel">PuzzleSolverTest</span>
extends java.lang.Object</pre>
<div class="block">Test cases for class SimplePuzzleSolver that implements PuzzleSolver.</div>
<dl>
<dt><span class="simpleTagLabel">Author:</span></dt>
<dd>Probir Roy, Peter Kemper</dd>
</dl>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleSolverTest.html#PuzzleSolverTest--">PuzzleSolverTest</a></span>()</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleSolverTest.html#testSolver2x2--">testSolver2x2</a></span>()</code>
<div class="block">This test case verifies that solver can find route from initial state to goal state.</div>
</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleSolverTest.html#testSolver2x2AutoGeneratePuzzle--">testSolver2x2AutoGeneratePuzzle</a></span>()</code>
<div class="block">Configure solver with automatically generated 2x2 initial and goal puzzle states.</div>
</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleSolverTest.html#testSolver2x2ImpossibleCase--">testSolver2x2ImpossibleCase</a></span>()</code>
<div class="block">This test case verifies solvers capability of handling impossible cases.</div>
</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleSolverTest.html#testSolver3x3AutoGeneratePuzzle--">testSolver3x3AutoGeneratePuzzle</a></span>()</code>
<div class="block">Test 3x3 puzzles that are solvable and generated with a random sequence of moves
 for a given starting state and a maximum length for the sequence of moves.</div>
</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleSolverTest.html#testSolverBothDirection2x2--">testSolverBothDirection2x2</a></span>()</code>
<div class="block">This test case verifies that solver can find route from initial state to goal state 
 and also traverse from goal state to initial state.</div>
</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleSolverTest.html#testSolverConfigure--">testSolverConfigure</a></span>()</code>
<div class="block">This test case verifies that solvers configuration function, getSolverState and getSolverFinalState function.</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>equals, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="PuzzleSolverTest--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>PuzzleSolverTest</h4>
<pre>public&nbsp;PuzzleSolverTest()</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="testSolverConfigure--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testSolverConfigure</h4>
<pre>public&nbsp;void&nbsp;testSolverConfigure()</pre>
<div class="block">This test case verifies that solvers configuration function, getSolverState and getSolverFinalState function.
 getSolverState must return the current state. Initially, before solving the puzzle, the initial 
 state and current state of solver must be same. getSolverState and getSolverFinalState must return 
 initial state and goal state respectively.
 This test case configure the solver with valid 2x2 initial and goal state.</div>
</li>
</ul>
<a name="testSolver2x2--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testSolver2x2</h4>
<pre>public&nbsp;void&nbsp;testSolver2x2()</pre>
<div class="block">This test case verifies that solver can find route from initial state to goal state.
 This test case configure the solver with valid 2x2 initial and goal state. The movesToSolve function 
 is called to verify the list moves the solver found to reach the goal state.</div>
</li>
</ul>
<a name="testSolverBothDirection2x2--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testSolverBothDirection2x2</h4>
<pre>public&nbsp;void&nbsp;testSolverBothDirection2x2()</pre>
<div class="block">This test case verifies that solver can find route from initial state to goal state 
 and also traverse from goal state to initial state. This test case configure the solver with valid 2x2 initial 
 and goal state.</div>
</li>
</ul>
<a name="testSolver2x2ImpossibleCase--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testSolver2x2ImpossibleCase</h4>
<pre>public&nbsp;void&nbsp;testSolver2x2ImpossibleCase()</pre>
<div class="block">This test case verifies solvers capability of handling impossible cases. It configures solver with 2x2 puzzle.
 In the test case goal state is impossible to reach from initial puzzle state. movesToSolve function of solver 
 is called to verify the response. movesToSolve function must return null for puzzles that are impossible to solve.</div>
</li>
</ul>
<a name="testSolver2x2AutoGeneratePuzzle--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testSolver2x2AutoGeneratePuzzle</h4>
<pre>public&nbsp;void&nbsp;testSolver2x2AutoGeneratePuzzle()</pre>
<div class="block">Configure solver with automatically generated 2x2 initial and goal puzzle states.
 movesToSolve function is called to verify the moves from initial state to goal state.
 movesToSolve function must return a list of moves for this test case.</div>
</li>
</ul>
<a name="testSolver3x3AutoGeneratePuzzle--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>testSolver3x3AutoGeneratePuzzle</h4>
<pre>public&nbsp;void&nbsp;testSolver3x3AutoGeneratePuzzle()</pre>
<div class="block">Test 3x3 puzzles that are solvable and generated with a random sequence of moves
 for a given starting state and a maximum length for the sequence of moves.
 This test performs a sequence of such tests for a growing maximum length from 1 to 10.</div>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/PuzzleSolverTest.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev&nbsp;Class</li>
<li>Next&nbsp;Class</li>
</ul>
<ul class="navList">
<li><a href="../../../../../index.html?edu/wm/cs/cs301/slidingpuzzle/PuzzleSolverTest.html" target="_top">Frames</a></li>
<li><a href="PuzzleSolverTest.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../../../../../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
